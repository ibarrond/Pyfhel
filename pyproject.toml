# This file contains the project metadata as defined in PEP621, as well as 
#  custom compilation and linking flags. Non-expert users should only modify
#  the following sections:
#  - [cpplibraries.SEAL.cmake-opts]

#===============================================================================
#============================== PROJECT METADATA ===============================
#===============================================================================
# Pyfhel's core metadata
[project]
name = "Pyfhel"
version = "3.4.2"
description = "Python for Homomorphic Encryption Libraries"
readme = "README.md"
requires-python = ">=3.7"
license = {text = "GNU GPLv3"}
keywords = ["homomorphic" , "encryption", "cython", "cryptography"]
authors = [
  {name = "Alberto Ibarrondo", email = "ibarrond@eurecom.fr"},
  {name = "Alexander Viand", email = "alexander.viand@inf.ethz.ch"},
]
classifiers = [
    "Programming Language :: C++",
    "Programming Language :: Cython",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: Implementation :: CPython",
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: Unix",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Topic :: Security",
    "Topic :: Security :: Cryptography",
]

dependencies = [
  "numpy>=1.21"
]

[project.optional-dependencies]
test = [
  "pytest >= 6",
  "coverage >= 6.4",
  "pytest-cov >= 3.0",
]

[project.urls]
homepage = "https://pyfhel.readthedocs.io"
documentation = "https://pyfhel.readthedocs.io"
repository = "https://github.com/ibarrond/github"


# Minimum requirements for the build system to execute.
[build-system]
requires = [
  "setuptools<=60.9",
  "wheel",
  "cython>=3.0.0",
  "numpy>=1.21",
  "cmake>=3.15",
  "toml>=0.10"
]
build-backend = "setuptools.build_meta"

# Tests config
[tool.pytest.ini_options]
testpaths = ["Pyfhel/test"]

[tool.coverage.run]
plugins = ["Cython.Coverage"]
source = ["Pyfhel"]
omit =[
    "setup.py",
    "Pyfhel/Afhel",
    "Pyfhel/backend",
    "Pyfhel/test/*",
    "examples/*",
    "*__init__*",
    "*.pxi",
    "Pyfhel/utils/*",
    "Pyfhel/PyPoly.pyx",
]

[platforms]
platforms = ["Linux", "Windows", "Darwin"]

#===============================================================================
#========================= COMPILATION CONFIGURATION ===========================
#===============================================================================
# Compile & link configuration for C/C++ libraries and extensions
# - Libs in mode 'cmake' are compiled running `cmake` inside source_dir.
# - Libs in mode 'standard' are compiled using the default platform compiler.
#------------------------------ C/C++ LIBRARIES --------------------------------
[cpplibraries]

  #--> SEAL
  [cpplibraries.SEAL]
  mode = 'cmake'              # standard/cmake
  lib_type = 'static'         # static/shared
  # source_dir: dir with the top CMakeLists.txt.
  source_dir = 'Pyfhel/backend/SEAL'
  include_dirs = [
    'Pyfhel/backend/SEAL/native/src',
    'Pyfhel/backend/SEAL/thirdparty/msgsl-src/include'
  ]

  ## Build-relative dirs:
  #  -> paths are relative to build directory.
  # built_library_dir: output dir containing the cmake-built libs
  built_library_dir='lib' 
  # built_include_dirs: dirs with cmake-built headers.
  built_include_dirs=['native/src', 'thirdparty/msgsl-src/include']

  ## CMake options: https://github.com/microsoft/SEAL/#basic-cmake-options
    [cpplibraries.SEAL.cmake_opts]
    CMAKE_BUILD_TYPE = 'Release'
    SEAL_USE_INTEL_HEXL ='OFF'   # ON/OFF, use Intel HEXL for low-level kernels
    SEAL_USE_ALIGNED_ALLOC ='OFF'# ON/OFF, 64B aligned memory allocations, better perf with Intel HEXL.
    BUILD_SHARED_LIBS ='OFF'     # ON/OFF, build shared and not static library
    SEAL_THROW_ON_TRANSPARENT_CIPHERTEXT='ON' # ON/OFF, runtime error when multiplying a ctxt with a zeroed plaintext.
    SEAL_USE_MSGSL = 'ON'       # ON/OFF,	Build with Microsoft GSL support.
    SEAL_USE_ZLIB	= 'ON'        # ON/OFF,	Build with ZLIB support.
    SEAL_USE_ZSTD	= 'ON'        # ON/OFF,	Build with Zstandard support.
    
  #--> Afhel
  [cpplibraries.Afhel]
  mode = 'standard'        # standard/cmake
  lib_type = 'shared'      # static/shared
  sources = ['Pyfhel/Afhel/Afseal.cpp',]
  include_dirs = ['Pyfhel/Afhel',]
  define_macros = [
    # ["SEAL_USE_ZLIB","0"],
    # ["SEAL_USE_ZSTD","0"],
  ]
  extra_compile_args = [
    {Windows = ["/O2","/std:c++17","/openmp"]},
    {Darwin = ["-std=c++17","-O3","-Xpreprocessor","-fopenmp"]},
    {Linux = ["-std=c++17","-O3","-fopenmp"]} ]
  extra_link_args = [
    {Windows = []},
    {Darwin = ["-Wl,-rpath,@loader_path/.", "-fopenmp","-Wl,-no_compact_unwind"]},
    {Linux = ["-Wl,-rpath=$ORIGIN/.", "-fopenmp"]} ]
  libraries = ['SEAL']


#----------------------------- CYTHON EXTENSIONS -------------------------------
[extensions.config]   # Common compilation config for all extensions
include_dirs = [
    {Darwin = ["/usr/local/include"]},
]
define_macros = [
  ["NPY_NO_DEPRECATED_API", "NPY_1_7_API_VERSION"],
  ["__PYX_ENUM_CLASS_DECL", "enum"], # Support enums in cython
]
extra_compile_args = [
  {Windows = ["/O2","/openmp","/std:c++17"]},
  {Darwin = ["-std=c++17","-O3","-Xpreprocessor","-fopenmp","-Wno-unreachable-code","-Wno-unqualified-std-cast-call"]},
  {Linux = ["-std=c++17","-O3","-fopenmp"]},
]
extra_link_args = [
  {Windows = []},
  {Darwin = ["-Wl,-rpath,@loader_path/.", "-fopenmp","-Wl,-no_compact_unwind"]},
  {Linux = ["-Wl,-rpath=$ORIGIN/.", "-fopenmp"]},
]
libraries = []  # libraries to link with, cpplibraries above are added by default

# List of extensions to compile. Custom compilation config can be defined for each
[extensions.Pyfhel]
fullname='Pyfhel.Pyfhel'    
sources=['Pyfhel/Pyfhel.pyx']

[extensions.PyCtxt]
fullname='Pyfhel.PyCtxt'    
sources=['Pyfhel/PyCtxt.pyx']

[extensions.PyPtxt]
fullname='Pyfhel.PyPtxt'    
sources=['Pyfhel/PyPtxt.pyx']

[extensions.PyPoly]
fullname='Pyfhel.PyPoly'    
sources=['Pyfhel/PyPoly.pyx']
